version: '3.8'

services:
  botoshi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kickbot_botoshi
    # Mount the current directory on the host to /app in the container
    # This allows local code changes to be reflected immediately in the container,
    # and ensures files like settings.json, tokens, and .db files are used from the host.
    volumes:
      - .:/app
    
    # Load environment variables from the .env file in the project directory
    env_file:
      - .env
      
    ports:
      - "5009:8080" # Host:Container
    
    working_dir: /app
    
    # Start the unified KickBot with webhook server (Stories 1-5 implementation)
    # This will:
    # - Initialize OAuth authentication (Story 1)
    # - Start unified webhook server on port 8080 (Story 2) 
    # - Subscribe to Kick API events automatically (Story 5)
    # - Process chat messages and commands via webhooks (not WebSocket)
    # 
    # Command line options:
    # - Add --force-reauth to force re-authentication
    # - Add --clear-tokens to clear tokens and exit
    command: bash -c "source /opt/conda/etc/profile.d/conda.sh && conda activate kickbot && python botoshi.py"
      
    # Keep stdin open and allocate a TTY
    # This is essential for attaching to the container or using 'docker exec' with an interactive shell.
    stdin_open: true
    tty: true 